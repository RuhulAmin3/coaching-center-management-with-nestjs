generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  password           String
  role               ROLE
  needPasswordChange Boolean    @default(true)
  passwordChangeAt   DateTime?
  studentId          String?    @unique
  teacherId          String?    @unique
  guardianId         String?    @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  students           Student[]
  teachers           Teacher[]
  guardians          Guardian[]

  @@map("users")
}

model Student {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String      @unique
  name             Name
  gender           GENDER
  dateOfBirth      DateTime
  admissionYear    Int
  guardian         GUARDIAN
  email            String?
  contactNo        String?
  bloodGroup       BLOOD_GROUP
  className        String
  classRoll        String
  section          String
  schoolName       String
  image            String
  address          String
  shortDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("students")
}

model Teacher {
  id                       String                       @id @default(auto()) @map("_id") @db.ObjectId
  teacherId                String                       @unique
  name                     Name
  gender                   GENDER
  email                    String
  contactNo                String
  bloodGroup               BLOOD_GROUP
  designation              String
  salary                   Int
  subject                  String
  educationalQualification EducationalQualificationType
  image                    String
  dateOfBirth              DateTime
  address                  String
  shortDescription         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("teachers")
}

model Guardian {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  guardianId       String                  @unique
  name             Name
  gender           GENDER
  email            String
  contactNo        String
  occupation       String
  bloodGroup       BLOOD_GROUP
  image            String
  accountStatus    GUARDIAN_ACCOUNT_STATUS @default(Pending)
  address          String
  user             User?                   @relation(fields: [userId], references: [id])
  userId           String?                 @db.ObjectId
  students         String[]
  shortDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guardians")
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]

  @@map("subjects")
}

model Class {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  subjectIds String[] @db.ObjectId
  subjects   Subject  @relation(fields: [subjectIds], references: [id])
  studentIds String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("classes")
}

type EducationalQualificationType {
  universityName String
  subject        String
  result         String?
  graduation     String
  completedYear  Int?
}

type Name {
  firstName  String
  middleName String?
  lastName   String
}

type GUARDIAN {
  fatherName       String
  fatherOccupation String
  fatherContactNo  String
  motherName       String
  motherOccupation String
  motherContactNo  String
}

enum GUARDIAN_ACCOUNT_STATUS {
  Pending
  Approve
  Reject
  Block
}

enum BLOOD_GROUP {
  A_POSITIVE  @map("A+")
  A_NEGETIVE  @map("A-")
  B_POSITIVE  @map("B+")
  B_NEGETIVE  @map("B-")
  AB_POSITIVE @map("AB+")
  AB_NEGETIVE @map("AB-")
  O_POSITIVE  @map("O+")
  O_NEGETIVE  @map("O-")
}

enum GENDER {
  Male
  Female
}

enum ROLE {
  ADMIN
  TEACHER
  GUARDIAN
  STUDENT
}
