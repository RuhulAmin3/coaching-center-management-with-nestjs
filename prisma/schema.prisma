generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  password           String
  role               ROLE
  needPasswordChange Boolean    @default(true)
  passwordChangeAt   DateTime?
  studentId          String?    @unique
  teacherId          String?    @unique
  guardianId         String?    @unique
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  students           Student[]
  teachers           Teacher[]
  guardians          Guardian[]
  notices            Notice[]

  @@map("users")
}

model Student {
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String                 @unique
  name             Name
  gender           GENDER
  dateOfBirth      DateTime
  admissionYear    Int
  guardian         GUARDIAN
  email            String?
  contactNo        String?
  bloodGroup       BLOOD_GROUP
  status           STUDENT_ACCOUNT_STATUS @default(Active)
  className        String
  classRoll        String
  section          String
  schoolName       String
  image            String
  address          String
  shortDescription String?

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.ObjectId
  examResults ExamResult[]

  @@map("students")
}

model Teacher {
  id                       String                       @id @default(auto()) @map("_id") @db.ObjectId
  teacherId                String                       @unique
  name                     Name
  gender                   GENDER
  email                    String                       @unique
  contactNo                String
  bloodGroup               BLOOD_GROUP
  designation              String
  salary                   Int
  subject                  String
  type                     TEACHER_TYPE                 @default(Monthly)
  educationalQualification EducationalQualificationType
  image                    String
  dateOfBirth              DateTime
  address                  String
  shortDescription         String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  salaries  Expense[]

  @@map("teachers")
}

model Guardian {
  id               String                  @id @default(auto()) @map("_id") @db.ObjectId
  guardianId       String                  @unique
  name             Name
  gender           GENDER
  email            String?
  contactNo        String
  occupation       String
  bloodGroup       BLOOD_GROUP
  image            String
  accountStatus    GUARDIAN_ACCOUNT_STATUS @default(Pending)
  address          String
  user             User?                   @relation(fields: [userId], references: [id])
  userId           String?                 @db.ObjectId
  students         String[]
  shortDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guardians")
}

model Subject {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subjects")
}

model Class {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  className String @unique

  subjectIds String[] @db.ObjectId

  studentIds  String[]     @default([]) // generating studentId by their data
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  exams       Exam[]
  examResults ExamResult[]

  @@map("classes")
}

model Exam {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  date     DateTime
  class    Class         @relation(fields: [classId], references: [id])
  classId  String        @db.ObjectId
  subjects ExamSubject[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  examResults ExamResult[]

  @@map("exams")
}

model Expense {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  type             ExpenseType
  month            MONTH
  year             String
  amount           Int
  pay              Int
  due              Int?
  status           ExpenseStatus
  teacherId        String?       @db.ObjectId
  teacher          Teacher?      @relation(fields: [teacherId], references: [id])
  date             DateTime
  shortDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model ExamResult {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  subjects  ExamResultSubject[]
  studentId String              @db.ObjectId
  student   Student             @relation(fields: [studentId], references: [id])
  examId    String              @db.ObjectId
  exam      Exam                @relation(fields: [examId], references: [id])
  classId   String              @db.ObjectId
  class     Class               @relation(fields: [classId], references: [id])
  gpa       Float
  grade     String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("exam_results")
}

model Notice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  authorId    String        @db.ObjectId
  author      User          @relation(fields: [authorId], references: [id])
  status      NOTICE_STATUS @default(Pending)
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notices")
}

type ExamResultSubject {
  totalMark    Int
  obtainedMark Int
  point        Float
  grade        String
  subjectId    String @db.ObjectId
}

type ExamSubject {
  totalMark Int
  subjectId String @db.ObjectId
}

type EducationalQualificationType {
  universityName String
  subject        String
  result         String?
  graduation     String
  completedYear  Int?
}

type Name {
  firstName  String
  middleName String?
  lastName   String
}

type GUARDIAN {
  fatherName       String
  fatherOccupation String
  fatherContactNo  String
  motherName       String
  motherOccupation String
  motherContactNo  String
}

enum MONTH {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum ExpenseType {
  Salary
  Transport
  Maintenance
  Purchase
  Breakfast
  Events
  Others
}

enum ExpenseStatus {
  Paid
  Due
  Partial
}

enum GUARDIAN_ACCOUNT_STATUS {
  Pending
  Approved
  Block
}

enum STUDENT_ACCOUNT_STATUS {
  Active
  Inacitve
  Block
}

enum NOTICE_STATUS {
  Published
  Archived
  Expired
  Pending
}

enum TEACHER_TYPE {
  Monthly
  Contractual
  Daily
}

enum BLOOD_GROUP {
  A_POSITIVE  @map("A+")
  A_NEGETIVE  @map("A-")
  B_POSITIVE  @map("B+")
  B_NEGETIVE  @map("B-")
  AB_POSITIVE @map("AB+")
  AB_NEGETIVE @map("AB-")
  O_POSITIVE  @map("O+")
  O_NEGETIVE  @map("O-")
}

enum GENDER {
  Male
  Female
}

enum ROLE {
  ADMIN
  TEACHER
  GUARDIAN
  STUDENT
}
